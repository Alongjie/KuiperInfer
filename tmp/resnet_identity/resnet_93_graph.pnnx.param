7767517
14 13
pnnx.Input               pnnx_input_0             0 1 0 #0=(4,3,128,128)f32
nn.Conv2d                conv1                    1 1 0 1 bias=True dilation=(1,1) groups=1 in_channels=3 kernel_size=(3,3) out_channels=64 padding=(1,1) padding_mode=zeros stride=(1,1) @bias=(64)f32 @weight=(64,3,3,3)f32 #0=(4,3,128,128)f32 #1=(4,64,128,128)f32
nn.ReLU                  relu1                    1 1 1 2 #1=(4,64,128,128)f32 #2=(4,64,128,128)f32
nn.Conv2d                conv1_1                  1 1 2 3 bias=True dilation=(1,1) groups=1 in_channels=64 kernel_size=(3,3) out_channels=64 padding=(1,1) padding_mode=zeros stride=(1,1) @bias=(64)f32 @weight=(64,64,3,3)f32 #2=(4,64,128,128)f32 #3=(4,64,128,128)f32
nn.ReLU                  relu1_1                  1 1 3 4 #3=(4,64,128,128)f32 #4=(4,64,128,128)f32
nn.Conv2d                conv1_2                  1 1 4 5 bias=True dilation=(1,1) groups=1 in_channels=64 kernel_size=(3,3) out_channels=64 padding=(1,1) padding_mode=zeros stride=(1,1) @bias=(64)f32 @weight=(64,64,3,3)f32 #4=(4,64,128,128)f32 #5=(4,64,128,128)f32
pnnx.Expression          pnnx_expr_2              2 1 2 5 6 expr=add(@0,@1) #2=(4,64,128,128)f32 #5=(4,64,128,128)f32 #6=(4,64,128,128)f32
nn.ReLU                  relu2                    1 1 6 7 #6=(4,64,128,128)f32 #7=(4,64,128,128)f32
nn.Conv2d                conv2_11                 1 1 7 8 bias=True dilation=(1,1) groups=1 in_channels=64 kernel_size=(3,3) out_channels=128 padding=(1,1) padding_mode=zeros stride=(2,2) @bias=(128)f32 @weight=(128,64,3,3)f32 #7=(4,64,128,128)f32 #8=(4,128,64,64)f32
nn.ReLU                  relu2_11                 1 1 8 9 #8=(4,128,64,64)f32 #9=(4,128,64,64)f32
nn.Conv2d                conv2_12                 1 1 9 10 bias=True dilation=(1,1) groups=1 in_channels=128 kernel_size=(3,3) out_channels=128 padding=(1,1) padding_mode=zeros stride=(1,1) @bias=(128)f32 @weight=(128,128,3,3)f32 #9=(4,128,64,64)f32 #10=(4,128,64,64)f32
nn.Conv2d                conv2_21                 1 1 7 11 bias=True dilation=(1,1) groups=1 in_channels=64 kernel_size=(1,1) out_channels=128 padding=(0,0) padding_mode=zeros stride=(2,2) @bias=(128)f32 @weight=(128,64,1,1)f32 #7=(4,64,128,128)f32 #11=(4,128,64,64)f32
pnnx.Expression          pnnx_expr_0              2 1 10 11 12 expr=add(@0,@1) #10=(4,128,64,64)f32 #11=(4,128,64,64)f32 #12=(4,128,64,64)f32
pnnx.Output              pnnx_output_0            1 0 12 #12=(4,128,64,64)f32
